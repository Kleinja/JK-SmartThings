/**
 *  Virtual Blind Controller
 *
 *  Copyright 2020 Jacob Klein
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 */
metadata {
	definition (name: "Virtual Blind Controller", namespace: "Virtual Blind Controller", author: "Jacob Klein", cstHandler: true) {
		capability "Window Shade"
		capability "Refresh"
	}


	simulator {
	}
  
  
	tiles {
		standardTile("toggle", "device.shade", width: 2, height: 2) {
			state("closed", label:'${name}', action:"shade control.open", icon:"st.doors.garage.garage-closed", backgroundColor:"#00A0DC")
			state("open", label:'${name}', action:"shade control.close", icon:"st.doors.garage.garage-open", backgroundColor:"#e86d13")
		}
		standardTile("open", "device.shade", inactiveLabel: false, decoration: "flat") {
			state "default", label:'open', action:"shade control.open", icon:"st.doors.garage.garage-opening"
		}
		standardTile("close", "device.shade", inactiveLabel: false, decoration: "flat") {
			state "default", label:'close', action:"shade control.close", icon:"st.doors.garage.garage-closing"
		}

		main "toggle"
		details(["toggle", "open", "close"])
	}
}

// parse events into attributes
def parse(String description) {
	log.debug "Parsing '${description}'"
}

// handle commands
def open() {
	log.debug "Executing 'open'"
	sendEvent(name: "shade", value: "open")
}

def close() {
	log.debug "Executing 'close'"
  sendEvent(name: "shade", value: "closed")
}

def installed() {
	log.trace "Executing 'installed'"
	initialize()
}

def updated() {
	log.trace "Executing 'updated'"
	initialize()
}

private initialize() {
	log.trace "Executing 'initialize'"

	sendEvent(name: "DeviceWatch-DeviceStatus", value: "online")
	sendEvent(name: "healthStatus", value: "online")
	sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false)
